# -*- coding: utf-8 -*-
"""Wuzzuf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WGFtpwt7auRZirzQMUqb4UdSrRVAKm1v
"""

import warnings

# Ignore all warnings for this cell
warnings.filterwarnings('ignore')

# Import pandas library
import pandas as pd

# read our dataset as a dataframe
df = pd.read_csv("wuzzuf_n.csv")

# fisrt five rows
df.head(10)
# df.tail(8)

df = df.drop(columns =["Unnamed: 0"])

df

# what about some information about our data?
df.info()

# Let's see if we have a duuplicated rows
df.duplicated().sum()

"""For now we have no duplicated rows. Let's focus on col by col"""

df['Job Name'].unique()[:50]

"""Ohh, we have a big task,
Data like ["Medical Sales Representative (Team Lead)", "Copywriter (Part-time | Remote)", "Remote- Work from Home- Real Estate Sales- Land Acquisition Specialist"]
forced us to take the first part e.g."Copywriter" and delete other parts e.g."(Part-time | Remote)"
"""

df['Job Name'].value_counts()[:20]

"""Let's do that with our simple clean_job_title"""

def clean_job_title(job_name):
    """
    Clean up the job_title by removing hyphenated words, text after forward slashes,
    and text within parentheses.

    Args:
        job_title (str): The job title string to be cleaned.

    Returns:
        str: The cleaned job title string.
    """
    cleaned_title = job_name.split("-")[0].strip().split("/")[0].strip().split("(")[0].strip()
    return cleaned_title

df['Job Name'] = df['Job Name'].apply(clean_job_title)

df['Job Name'].unique()[:50]

df['Job Name'].value_counts()[:20]

"""there has been a noteworthy enhancement in the job titles as they are now considerably more consistent. This positive change is evident from the significant increase in the frequency of each job title.

=======================================================================================================================
"""

df["Company Name"].unique()

df["Company Name"].nunique()

df["Company Name"].value_counts()[:20]

"""I think we have no problem with this column

=======================================================================================================================
"""

df['Experience years'].unique()

"""I think we have many problems with this column :)

- First we need to git rid of this part "Yrs of Exp" from each value
- Git rid of values as " ", "-"
- Then git rid of any text values
- Do some operations for make the unique list short

Git rid of this part "Yrs of Exp"
"""

import re

def extract_numeric_and_hyphen(input_string):
    """
    Extract only numeric values and hyphens from the input string.

    Args:
        input_string (str): The string from which to extract numeric values and hyphens.

    Returns:
        str: The cleaned string containing only numeric values and hyphens.
    """
    return re.sub(r"[^0-9-]", "", input_string)

df['Experience years'] = df['Experience years'].apply(extract_numeric_and_hyphen)

df['Experience years'].unique()

"""Git rid of values as " ", "-"
"""

# Remove empty values ('') or just hyphen ('-') from the "Experience years" column
df = df[(df['Experience years'] != '') & (df['Experience years'] != '-')]

df['Experience years'].unique()

"""Turn values like '1-1', '8-8, '20-20' to '1', '8', '20'"""

def clean_experience(exp):
    """
    Clean up the 'Experience years' data by checking if the value contains a hyphen ("-")
    and both parts of the split result are equal. If so, it returns only one part;
    otherwise, it leaves the original 'Experience years' value unchanged.

   a Args:
        exp (str): The 'Experience years' value to be cleaned.

    Returns:
        str: The cleaned 'Experience years' value.
    """
   # Split the 'Experience years' value by hyphen
    parts = exp.split('-')

    # Check if there are exactly two parts and they are equal
    if len(parts) == 2 and parts[0] == parts[1]:
        return parts[0]  # If equal, return only one part
    else:
        return exp  # If not equal or not two parts, return the original value unchanged

df['Experience years'] = df['Experience years'].apply(clean_experience)

df['Experience years'].unique()

"""single values into range format"""

def convert_single_to_range(data):
    """
    Converts single values in the list to range format by matching them to existing ranges.

    Args:
        data (list): A list of values where single values might be converted to ranges.

    Returns:
        list: The modified list with single values converted to ranges and sorted.
    """
    # Step 1: Convert single values to range format
    for i, item in enumerate(data):
        if '-' not in item:
            value = int(item)
            for range_item in data:
                if '-' in range_item:
                    start, end = map(int, range_item.split('-'))
                    if start <= value <= end:
                        data[i] = range_item
                        break

    # Step 2: Filter out empty strings and sort the list of ranges
    data = [item for item in data if item.strip()]
    data.sort(key=lambda x: int(x.split('-')[0]))



    return data

# Convert 'Experience years' column to a list
experience_list = df['Experience years'].tolist()

# Process the list using the function
processed_experience = convert_single_to_range(experience_list)

# Assign the processed list back to the DataFrame column
df['Experience years'] = processed_experience

df['Experience years'].unique()

df.head()

df["Job Type"].unique()

"""'Freelance / Project' to 'Freelance'"""

def clean_job_type(job_type):
    """
    Clean up the job_title by removing hyphenated words, text after forward slashes,
    and text within parentheses.

    Args:
        job_title (str): The job title string to be cleaned.

    Returns:
        str: The cleaned job title string.
    """
    cleaned_title = job_type.split("/")[0].strip()
    return cleaned_title

df["Job Type"] = df["Job Type"].apply(clean_job_type)

df["Job Type"].unique()

"""======================================================================================================================="""

df["Location"].unique()

df["Location"].nunique()

"""I think we just have two things to do here"""

# 1. Convert to Lowercase
df['Location'] = df['Location'].str.lower()
# 2. Remove Leading and Trailing Spaces
df['Location'] = df['Location'].str.strip()

df["Location"].unique()

df["Location"].nunique()

"""======================================================================================================================="""

df.Skills.unique()

def clean_skills(skills):
    """
    Clean up the skills by removing text after forward slashes.

    Args:
        skills (str): The job title string to be cleaned.

    Returns:
        str: The cleaned skills string.
    """
    cleaned_title = skills.split("/")
    return cleaned_title

df['Skills'] = df['Skills'].apply(clean_skills)

df.head()

"""Done."""

